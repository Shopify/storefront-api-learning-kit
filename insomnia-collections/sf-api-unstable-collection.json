{
	"info": {
		"name": "wholesome-dimsum.myshopify.com-GraphMan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Queries",
			"item": [
				{
					"name": "article",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific Article by its ID.\nquery article($id: ID!) {\n  article(id: $id) {\n    author # The article's author.\n    authorV2 # The article's author.\n    blog # The blog that the article belongs to.\n    comments # List of comments posted on the article.\n    content # Stripped content of the article, single line with HTML tags removed.\n    contentHtml # The content of the article, complete with HTML formatting.\n    excerpt # Stripped excerpt of the article, single line with HTML tags removed.\n    excerptHtml # The excerpt of the article, complete with HTML formatting.\n    handle # A human-friendly unique string for the Article automatically generated from its title. \n    id # A globally-unique identifier.\n    image # The image associated with the article.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    publishedAt # The date and time when the article was published.\n    seo # The article’s SEO information.\n    tags # A categorization that a article can be tagged with.\n    title # The article’s name.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific Article by its ID."
					},
					"response": []
				},
				{
					"name": "articles",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop's articles.\nquery articles($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: ArticleSortKeys, $query: String) {\n  articles(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    query: $query\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in ArticleEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop's articles."
					},
					"response": []
				},
				{
					"name": "blog",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific `Blog` by one of its unique attributes.\nquery blog($id: ID, $handle: String) {\n  blog(id: $id, handle: $handle) {\n    articleByHandle # Find an article by its handle.\n    articles # List of the blog's articles.\n    authors # The authors who have contributed to the blog.\n    handle # A human-friendly unique string for the Blog automatically generated from its title. \n    id # A globally-unique identifier.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    seo # The blog's SEO information.\n    title # The blogs’s title.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"handle\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific `Blog` by one of its unique attributes."
					},
					"response": []
				},
				{
					"name": "blogByHandle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find a blog by its handle.\nquery blogByHandle($handle: String!) {\n  blogByHandle(handle: $handle) {\n    articleByHandle # Find an article by its handle.\n    articles # List of the blog's articles.\n    authors # The authors who have contributed to the blog.\n    handle # A human-friendly unique string for the Blog automatically generated from its title. \n    id # A globally-unique identifier.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    seo # The blog's SEO information.\n    title # The blogs’s title.\n  }\n}",
								"variables": "{\n\t\"handle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find a blog by its handle."
					},
					"response": []
				},
				{
					"name": "blogs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop's blogs.\nquery blogs($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: BlogSortKeys, $query: String) {\n  blogs(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    query: $query\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in BlogEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop's blogs."
					},
					"response": []
				},
				{
					"name": "cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Retrieve a cart by its ID. For more information, refer to\n# [Manage a cart with the Storefront API](https://shopify.dev/custom-storefronts/cart/manage).\n# \nquery cart($id: ID!) {\n  cart(id: $id) {\n    attribute # An attribute associated with the cart.\n    attributes # The attributes associated with the cart. Attributes are represented as key-value pairs.\n    buyerIdentity # Information about the buyer that is interacting with the cart.\n    checkoutUrl # The URL of the checkout for the cart.\n    cost # The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).\n    createdAt # The date and time when the cart was created.\n    deliveryGroups # The delivery groups available for the cart, based on the buyer identity default delivery address preference or the default address of the logged-in customer. \n    discountAllocations # The discounts that have been applied to the entire cart.\n    discountCodes # The case-insensitive discount codes that the customer added at checkout. \n    estimatedCost # The estimated costs that the buyer will pay at checkout. The estimated costs are subject to change and changes will be reflected at checkout. The `estimatedCost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing). \n    id # A globally-unique identifier.\n    lines # A list of lines containing information about the items the customer intends to purchase.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    note # A note that is associated with the cart. For example, the note can be a personalized message to the buyer.\n    totalQuantity # The total number of items in the cart.\n    updatedAt # The date and time when the cart was updated.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Retrieve a cart by its ID. For more information, refer to\n[Manage a cart with the Storefront API](https://shopify.dev/custom-storefronts/cart/manage).\n"
					},
					"response": []
				},
				{
					"name": "collection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific `Collection` by one of its unique attributes.\nquery collection($id: ID, $handle: String) {\n  collection(id: $id, handle: $handle) {\n    description # Stripped description of the collection, single line with HTML tags removed.\n    descriptionHtml # The description of the collection, complete with HTML formatting.\n    handle # A human-friendly unique string for the collection automatically generated from its title. Limit of 255 characters. \n    id # A globally-unique identifier.\n    image # Image associated with the collection.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    products # List of products in the collection.\n    seo # The collection's SEO information.\n    title # The collection’s name. Limit of 255 characters.\n    updatedAt # The date and time when the collection was last modified.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"handle\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific `Collection` by one of its unique attributes."
					},
					"response": []
				},
				{
					"name": "collectionByHandle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find a collection by its handle.\nquery collectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    description # Stripped description of the collection, single line with HTML tags removed.\n    descriptionHtml # The description of the collection, complete with HTML formatting.\n    handle # A human-friendly unique string for the collection automatically generated from its title. Limit of 255 characters. \n    id # A globally-unique identifier.\n    image # Image associated with the collection.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    products # List of products in the collection.\n    seo # The collection's SEO information.\n    title # The collection’s name. Limit of 255 characters.\n    updatedAt # The date and time when the collection was last modified.\n  }\n}",
								"variables": "{\n\t\"handle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find a collection by its handle."
					},
					"response": []
				},
				{
					"name": "collections",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop’s collections.\nquery collections($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: CollectionSortKeys, $query: String) {\n  collections(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    query: $query\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in CollectionEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop’s collections."
					},
					"response": []
				},
				{
					"name": "customer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find a customer by its access token.\nquery customer($customerAccessToken: String!) {\n  customer(customerAccessToken: $customerAccessToken) {\n    acceptsMarketing # Indicates whether the customer has consented to be sent marketing material via email.\n    addresses # A list of addresses for the customer.\n    createdAt # The date and time when the customer was created.\n    defaultAddress # The customer’s default address.\n    displayName # The customer’s name, email or phone number.\n    email # The customer’s email address.\n    firstName # The customer’s first name.\n    id # A unique identifier for the customer.\n    lastIncompleteCheckout # The customer's most recently updated, incomplete checkout.\n    lastName # The customer’s last name.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    numberOfOrders # The number of orders that the customer has made at the store in their lifetime.\n    orders # The orders associated with the customer.\n    phone # The customer’s phone number.\n    tags # A comma separated list of tags that have been added to the customer. Additional access scope required: unauthenticated_read_customer_tags. \n    updatedAt # The date and time when the customer information was updated.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find a customer by its access token."
					},
					"response": []
				},
				{
					"name": "localization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Returns the localized experiences configured for the shop.\nquery localization {\n  localization {\n    availableCountries # The list of countries with enabled localized experiences.\n    availableLanguages # The list of languages available for the active country.\n    country # The country of the active localized experience. Use the `@inContext` directive to change this value.\n    language # The language of the active localized experience. Use the `@inContext` directive to change this value.\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Returns the localized experiences configured for the shop."
					},
					"response": []
				},
				{
					"name": "locations",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop's locations that support in-store pickup.\n# \n# When sorting by distance, you must specify a location via the `near` argument.\n# \nquery locations($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: LocationSortKeys, $near: GeoCoordinateInput) {\n  locations(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    near: $near\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in LocationEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"near\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop's locations that support in-store pickup.\n\nWhen sorting by distance, you must specify a location via the `near` argument.\n"
					},
					"response": []
				},
				{
					"name": "menu",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# A storefront menu.\nquery menu($handle: String!) {\n  menu(handle: $handle) {\n    handle # The menu's handle.\n    id # A globally-unique identifier.\n    items # The menu's child items.\n    itemsCount # The count of items on the menu.\n    title # The menu's title.\n  }\n}",
								"variables": "{\n\t\"handle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "A storefront menu."
					},
					"response": []
				},
				{
					"name": "metaobject",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific Metaobject by one of its unique identifiers.\nquery metaobject($id: ID, $handle: MetaobjectHandleInput) {\n  metaobject(id: $id, handle: $handle) {\n    field # Accesses a field of the object by key.\n    fields # All object fields with defined values. Omitted object keys can be assumed null, and no guarantees are made about field order. \n    handle # The unique handle of the metaobject. Useful as a custom ID.\n    id # A globally-unique identifier.\n    type # The type of the metaobject. Defines the namespace of its associated metafields.\n    updatedAt # The date and time when the metaobject was last updated.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"handle\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific Metaobject by one of its unique identifiers."
					},
					"response": []
				},
				{
					"name": "metaobjects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# All active metaobjects for the shop.\nquery metaobjects($type: String!, $sortKey: String, $first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean) {\n  metaobjects(\n    type: $type\n    sortKey: $sortKey\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in MetaobjectEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"type\": \"\",\n\t\"sortKey\": null,\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "All active metaobjects for the shop."
					},
					"response": []
				},
				{
					"name": "node",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Returns a specific node by ID.\nquery node($id: ID!) {\n  node(id: $id) {\n    id # A globally-unique identifier.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Returns a specific node by ID."
					},
					"response": []
				},
				{
					"name": "nodes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Returns the list of nodes with the given IDs.\nquery nodes($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    id # A globally-unique identifier.\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Returns the list of nodes with the given IDs."
					},
					"response": []
				},
				{
					"name": "page",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific `Page` by one of its unique attributes.\nquery page($id: ID, $handle: String) {\n  page(id: $id, handle: $handle) {\n    body # The description of the page, complete with HTML formatting.\n    bodySummary # Summary of the page body.\n    createdAt # The timestamp of the page creation.\n    handle # A human-friendly unique string for the page automatically generated from its title.\n    id # A globally-unique identifier.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    seo # The page's SEO information.\n    title # The title of the page.\n    updatedAt # The timestamp of the latest page update.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"handle\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific `Page` by one of its unique attributes."
					},
					"response": []
				},
				{
					"name": "pageByHandle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find a page by its handle.\nquery pageByHandle($handle: String!) {\n  pageByHandle(handle: $handle) {\n    body # The description of the page, complete with HTML formatting.\n    bodySummary # Summary of the page body.\n    createdAt # The timestamp of the page creation.\n    handle # A human-friendly unique string for the page automatically generated from its title.\n    id # A globally-unique identifier.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    seo # The page's SEO information.\n    title # The title of the page.\n    updatedAt # The timestamp of the latest page update.\n  }\n}",
								"variables": "{\n\t\"handle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find a page by its handle."
					},
					"response": []
				},
				{
					"name": "pages",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop's pages.\nquery pages($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: PageSortKeys, $query: String) {\n  pages(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    query: $query\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in PageEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop's pages."
					},
					"response": []
				},
				{
					"name": "product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Fetch a specific `Product` by one of its unique attributes.\nquery product($id: ID, $handle: String) {\n  product(id: $id, handle: $handle) {\n    availableForSale # Indicates if at least one product variant is available for sale.\n    collections # List of collections a product belongs to.\n    compareAtPriceRange # The compare at price of the product across all variants.\n    createdAt # The date and time when the product was created.\n    description # Stripped description of the product, single line with HTML tags removed.\n    descriptionHtml # The description of the product, complete with HTML formatting.\n    featuredImage # The featured image for the product.  This field is functionally equivalent to `images(first: 1)`. \n    handle # A human-friendly unique string for the Product automatically generated from its title. They are used by the Liquid templating language to refer to objects. \n    id # A globally-unique identifier.\n    images # List of images associated with the product.\n    isGiftCard # Whether the product is a gift card.\n    media # The media associated with the product.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    options # List of product options.\n    priceRange # The price range.\n    productType # A categorization that a product can be tagged with, commonly used for filtering and searching.\n    publishedAt # The date and time when the product was published to the channel.\n    requiresSellingPlan # Whether the product can only be purchased with a selling plan.\n    sellingPlanGroups # A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.\n    seo # The product's SEO information.\n    tags # A comma separated list of tags that have been added to the product. Additional access scope required for private apps: unauthenticated_read_product_tags. \n    title # The product’s title.\n    totalInventory # The total quantity of inventory in stock for this Product.\n    updatedAt # The date and time when the product was last modified. A product's `updatedAt` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update. \n    variantBySelectedOptions # Find a product’s variant based on its selected options. This is useful for converting a user’s selection of product options into a single matching variant. If there is not a variant for the selected options, `null` will be returned. \n    variants # List of the product’s variants.\n    vendor # The product’s vendor name.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"handle\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Fetch a specific `Product` by one of its unique attributes."
					},
					"response": []
				},
				{
					"name": "productByHandle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find a product by its handle.\nquery productByHandle($handle: String!) {\n  productByHandle(handle: $handle) {\n    availableForSale # Indicates if at least one product variant is available for sale.\n    collections # List of collections a product belongs to.\n    compareAtPriceRange # The compare at price of the product across all variants.\n    createdAt # The date and time when the product was created.\n    description # Stripped description of the product, single line with HTML tags removed.\n    descriptionHtml # The description of the product, complete with HTML formatting.\n    featuredImage # The featured image for the product.  This field is functionally equivalent to `images(first: 1)`. \n    handle # A human-friendly unique string for the Product automatically generated from its title. They are used by the Liquid templating language to refer to objects. \n    id # A globally-unique identifier.\n    images # List of images associated with the product.\n    isGiftCard # Whether the product is a gift card.\n    media # The media associated with the product.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    options # List of product options.\n    priceRange # The price range.\n    productType # A categorization that a product can be tagged with, commonly used for filtering and searching.\n    publishedAt # The date and time when the product was published to the channel.\n    requiresSellingPlan # Whether the product can only be purchased with a selling plan.\n    sellingPlanGroups # A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.\n    seo # The product's SEO information.\n    tags # A comma separated list of tags that have been added to the product. Additional access scope required for private apps: unauthenticated_read_product_tags. \n    title # The product’s title.\n    totalInventory # The total quantity of inventory in stock for this Product.\n    updatedAt # The date and time when the product was last modified. A product's `updatedAt` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update. \n    variantBySelectedOptions # Find a product’s variant based on its selected options. This is useful for converting a user’s selection of product options into a single matching variant. If there is not a variant for the selected options, `null` will be returned. \n    variants # List of the product’s variants.\n    vendor # The product’s vendor name.\n  }\n}",
								"variables": "{\n\t\"handle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find a product by its handle."
					},
					"response": []
				},
				{
					"name": "productRecommendations",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Find recommended products related to a given `product_id`.\n# To learn more about how recommendations are generated, see\n# [*Showing product recommendations on product pages*](https://help.shopify.com/themes/development/recommended-products).\n# \nquery productRecommendations($productId: ID!, $intent: ProductRecommendationIntent) {\n  productRecommendations(productId: $productId, intent: $intent) {\n    availableForSale # Indicates if at least one product variant is available for sale.\n    collections # List of collections a product belongs to.\n    compareAtPriceRange # The compare at price of the product across all variants.\n    createdAt # The date and time when the product was created.\n    description # Stripped description of the product, single line with HTML tags removed.\n    descriptionHtml # The description of the product, complete with HTML formatting.\n    featuredImage # The featured image for the product.  This field is functionally equivalent to `images(first: 1)`. \n    handle # A human-friendly unique string for the Product automatically generated from its title. They are used by the Liquid templating language to refer to objects. \n    id # A globally-unique identifier.\n    images # List of images associated with the product.\n    isGiftCard # Whether the product is a gift card.\n    media # The media associated with the product.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    onlineStoreUrl # The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel.\n    options # List of product options.\n    priceRange # The price range.\n    productType # A categorization that a product can be tagged with, commonly used for filtering and searching.\n    publishedAt # The date and time when the product was published to the channel.\n    requiresSellingPlan # Whether the product can only be purchased with a selling plan.\n    sellingPlanGroups # A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans.\n    seo # The product's SEO information.\n    tags # A comma separated list of tags that have been added to the product. Additional access scope required for private apps: unauthenticated_read_product_tags. \n    title # The product’s title.\n    totalInventory # The total quantity of inventory in stock for this Product.\n    updatedAt # The date and time when the product was last modified. A product's `updatedAt` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update. \n    variantBySelectedOptions # Find a product’s variant based on its selected options. This is useful for converting a user’s selection of product options into a single matching variant. If there is not a variant for the selected options, `null` will be returned. \n    variants # List of the product’s variants.\n    vendor # The product’s vendor name.\n  }\n}",
								"variables": "{\n\t\"productId\": \"0\",\n\t\"intent\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Find recommended products related to a given `product_id`.\nTo learn more about how recommendations are generated, see\n[*Showing product recommendations on product pages*](https://help.shopify.com/themes/development/recommended-products).\n"
					},
					"response": []
				},
				{
					"name": "productTags",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Tags added to products.\n# Additional access scope required: unauthenticated_read_product_tags.\n# \nquery productTags($first: Int!) {\n  productTags(first: $first) {\n    edges # A list of edges.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": 0\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Tags added to products.\nAdditional access scope required: unauthenticated_read_product_tags.\n"
					},
					"response": []
				},
				{
					"name": "productTypes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of product types for the shop's products that are published to your app.\nquery productTypes($first: Int!) {\n  productTypes(first: $first) {\n    edges # A list of edges.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": 0\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of product types for the shop's products that are published to your app."
					},
					"response": []
				},
				{
					"name": "products",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# List of the shop’s products.\nquery products($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $sortKey: ProductSortKeys, $query: String) {\n  products(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    sortKey: $sortKey\n    query: $query\n  ) {\n    edges # A list of edges.\n    filters # A list of available filters.\n    nodes # A list of the nodes contained in ProductEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"sortKey\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "List of the shop’s products."
					},
					"response": []
				},
				{
					"name": "publicApiVersions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# The list of public Storefront API versions, including supported, release candidate and unstable versions.\nquery publicApiVersions {\n  publicApiVersions {\n    displayName # The human-readable name of the version.\n    handle # The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.\n    supported # Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "The list of public Storefront API versions, including supported, release candidate and unstable versions."
					},
					"response": []
				},
				{
					"name": "shop",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# The shop associated with the storefront access token.\nquery shop {\n  shop {\n    brand # The shop's branding configuration.\n    description # A description of the shop.\n    id # A globally-unique identifier.\n    metafield # Returns a metafield found by namespace and key.\n    metafields # The metafields associated with the resource matching the supplied list of namespaces and keys. \n    moneyFormat # A string representing the way currency is formatted when the currency isn’t specified.\n    name # The shop’s name.\n    paymentSettings # Settings related to payments.\n    primaryDomain # The primary domain of the shop’s Online Store.\n    privacyPolicy # The shop’s privacy policy.\n    refundPolicy # The shop’s refund policy.\n    shippingPolicy # The shop’s shipping policy.\n    shipsToCountries # Countries that the shop ships to.\n    subscriptionPolicy # The shop’s subscription policy.\n    termsOfService # The shop’s terms of service.\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "The shop associated with the storefront access token."
					},
					"response": []
				},
				{
					"name": "urlRedirects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# A list of redirects for a shop.\nquery urlRedirects($first: Int, $after: String, $last: Int, $before: String, $reverse: Boolean, $query: String) {\n  urlRedirects(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    reverse: $reverse\n    query: $query\n  ) {\n    edges # A list of edges.\n    nodes # A list of the nodes contained in UrlRedirectEdge.\n    pageInfo # Information to aid in pagination.\n  }\n}",
								"variables": "{\n\t\"first\": null,\n\t\"after\": null,\n\t\"last\": null,\n\t\"before\": null,\n\t\"reverse\": null,\n\t\"query\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "A list of redirects for a shop."
					},
					"response": []
				}
			]
		},
		{
			"name": "Mutations",
			"item": [
				{
					"name": "cartAttributesUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the attributes on a cart.\nmutation cartAttributesUpdate($attributes: [AttributeInput!]!, $cartId: ID!) {\n  cartAttributesUpdate(attributes: $attributes, cartId: $cartId) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"attributes\": [{}],\n\t\"cartId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the attributes on a cart."
					},
					"response": []
				},
				{
					"name": "cartBuyerIdentityUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates customer information associated with a cart.\n# Buyer identity is used to determine\n# [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)\n# and should match the customer's shipping address.\n# \nmutation cartBuyerIdentityUpdate($cartId: ID!, $buyerIdentity: CartBuyerIdentityInput!) {\n  cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"buyerIdentity\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates customer information associated with a cart.\nBuyer identity is used to determine\n[international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing)\nand should match the customer's shipping address.\n"
					},
					"response": []
				},
				{
					"name": "cartCreate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a new cart.\nmutation cartCreate($input: CartInput) {\n  cartCreate(input: $input) {\n    cart # The new cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a new cart."
					},
					"response": []
				},
				{
					"name": "cartDiscountCodesUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the discount codes applied to the cart.\nmutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String]!) {\n  cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"discountCodes\": [\"\"]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the discount codes applied to the cart."
					},
					"response": []
				},
				{
					"name": "cartLinesAdd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Adds a merchandise line to the cart.\nmutation cartLinesAdd($lines: [CartLineInput!]!, $cartId: ID!) {\n  cartLinesAdd(lines: $lines, cartId: $cartId) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"lines\": [{}],\n\t\"cartId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Adds a merchandise line to the cart."
					},
					"response": []
				},
				{
					"name": "cartLinesRemove",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Removes one or more merchandise lines from the cart.\nmutation cartLinesRemove($cartId: ID!, $lineIds: [ID!]!) {\n  cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"lineIds\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Removes one or more merchandise lines from the cart."
					},
					"response": []
				},
				{
					"name": "cartLinesUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates one or more merchandise lines on a cart.\nmutation cartLinesUpdate($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n  cartLinesUpdate(cartId: $cartId, lines: $lines) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"lines\": [{}]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates one or more merchandise lines on a cart."
					},
					"response": []
				},
				{
					"name": "cartMetafieldDelete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Deletes a cart metafield.\nmutation cartMetafieldDelete($input: CartMetafieldDeleteInput!) {\n  cartMetafieldDelete(input: $input) {\n    deletedId # The ID of the deleted cart metafield.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Deletes a cart metafield."
					},
					"response": []
				},
				{
					"name": "cartMetafieldsSet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Sets cart metafield values. Cart metafield values will be set regardless if they were previously created or not.\n# \n# Allows a maximum of 25 cart metafields to be set at a time.\n# \nmutation cartMetafieldsSet($metafields: [CartMetafieldsSetInput!]!) {\n  cartMetafieldsSet(metafields: $metafields) {\n    metafields # The list of cart metafields that were set.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"metafields\": [{}]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Sets cart metafield values. Cart metafield values will be set regardless if they were previously created or not.\n\nAllows a maximum of 25 cart metafields to be set at a time.\n"
					},
					"response": []
				},
				{
					"name": "cartNoteUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the note on the cart.\nmutation cartNoteUpdate($cartId: ID!, $note: String) {\n  cartNoteUpdate(cartId: $cartId, note: $note) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"note\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the note on the cart."
					},
					"response": []
				},
				{
					"name": "cartSelectedDeliveryOptionsUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Update the selected delivery options for a delivery group.\nmutation cartSelectedDeliveryOptionsUpdate($cartId: ID!, $selectedDeliveryOptions: [CartSelectedDeliveryOptionInput!]!) {\n  cartSelectedDeliveryOptionsUpdate(\n    cartId: $cartId\n    selectedDeliveryOptions: $selectedDeliveryOptions\n  ) {\n    cart # The updated cart.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"cartId\": \"0\",\n\t\"selectedDeliveryOptions\": [{}]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Update the selected delivery options for a delivery group."
					},
					"response": []
				},
				{
					"name": "checkoutAttributesUpdateV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the attributes of a checkout if `allowPartialAddresses` is `true`.\nmutation checkoutAttributesUpdateV2($checkoutId: ID!, $input: CheckoutAttributesUpdateV2Input!) {\n  checkoutAttributesUpdateV2(checkoutId: $checkoutId, input: $input) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the attributes of a checkout if `allowPartialAddresses` is `true`."
					},
					"response": []
				},
				{
					"name": "checkoutCompleteFree",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card.\nmutation checkoutCompleteFree($checkoutId: ID!) {\n  checkoutCompleteFree(checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card."
					},
					"response": []
				},
				{
					"name": "checkoutCompleteWithCreditCardV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to  [_request payment processing_](https://shopify.dev/apps/channels/getting-started#request-payment-processing).\nmutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\n  checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\n    checkout # The checkout on which the payment was applied.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    payment # A representation of the attempted payment.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"payment\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to  [_request payment processing_](https://shopify.dev/apps/channels/getting-started#request-payment-processing)."
					},
					"response": []
				},
				{
					"name": "checkoutCompleteWithTokenizedPaymentV3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Completes a checkout with a tokenized payment.\nmutation checkoutCompleteWithTokenizedPaymentV3($checkoutId: ID!, $payment: TokenizedPaymentInputV3!) {\n  checkoutCompleteWithTokenizedPaymentV3(\n    checkoutId: $checkoutId\n    payment: $payment\n  ) {\n    checkout # The checkout on which the payment was applied.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    payment # A representation of the attempted payment.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"payment\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Completes a checkout with a tokenized payment."
					},
					"response": []
				},
				{
					"name": "checkoutCreate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a new checkout.\nmutation checkoutCreate($input: CheckoutCreateInput!, $queueToken: String) {\n  checkoutCreate(input: $input, queueToken: $queueToken) {\n    checkout # The new checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    queueToken # The checkout queue token. Available only to selected stores.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"input\": {},\n\t\"queueToken\": null\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a new checkout."
					},
					"response": []
				},
				{
					"name": "checkoutCustomerAssociateV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Associates a customer to the checkout.\nmutation checkoutCustomerAssociateV2($checkoutId: ID!, $customerAccessToken: String!) {\n  checkoutCustomerAssociateV2(\n    checkoutId: $checkoutId\n    customerAccessToken: $customerAccessToken\n  ) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    customer # The associated customer object.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"customerAccessToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Associates a customer to the checkout."
					},
					"response": []
				},
				{
					"name": "checkoutCustomerDisassociateV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Disassociates the current checkout customer from the checkout.\nmutation checkoutCustomerDisassociateV2($checkoutId: ID!) {\n  checkoutCustomerDisassociateV2(checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Disassociates the current checkout customer from the checkout."
					},
					"response": []
				},
				{
					"name": "checkoutDiscountCodeApplyV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Applies a discount to an existing checkout using a discount code.\nmutation checkoutDiscountCodeApplyV2($discountCode: String!, $checkoutId: ID!) {\n  checkoutDiscountCodeApplyV2(\n    discountCode: $discountCode\n    checkoutId: $checkoutId\n  ) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"discountCode\": \"\",\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Applies a discount to an existing checkout using a discount code."
					},
					"response": []
				},
				{
					"name": "checkoutDiscountCodeRemove",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Removes the applied discounts from an existing checkout.\nmutation checkoutDiscountCodeRemove($checkoutId: ID!) {\n  checkoutDiscountCodeRemove(checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Removes the applied discounts from an existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutEmailUpdateV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the email on an existing checkout.\nmutation checkoutEmailUpdateV2($checkoutId: ID!, $email: String!) {\n  checkoutEmailUpdateV2(checkoutId: $checkoutId, email: $email) {\n    checkout # The checkout object with the updated email.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"email\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the email on an existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutGiftCardRemoveV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Removes an applied gift card from the checkout.\nmutation checkoutGiftCardRemoveV2($appliedGiftCardId: ID!, $checkoutId: ID!) {\n  checkoutGiftCardRemoveV2(\n    appliedGiftCardId: $appliedGiftCardId\n    checkoutId: $checkoutId\n  ) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"appliedGiftCardId\": \"0\",\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Removes an applied gift card from the checkout."
					},
					"response": []
				},
				{
					"name": "checkoutGiftCardsAppend",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Appends gift cards to an existing checkout.\nmutation checkoutGiftCardsAppend($giftCardCodes: [String!]!, $checkoutId: ID!) {\n  checkoutGiftCardsAppend(giftCardCodes: $giftCardCodes, checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"giftCardCodes\": [\"\"],\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Appends gift cards to an existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutLineItemsAdd",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Adds a list of line items to a checkout.\nmutation checkoutLineItemsAdd($lineItems: [CheckoutLineItemInput!]!, $checkoutId: ID!) {\n  checkoutLineItemsAdd(lineItems: $lineItems, checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"lineItems\": [{}],\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Adds a list of line items to a checkout."
					},
					"response": []
				},
				{
					"name": "checkoutLineItemsRemove",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Removes line items from an existing checkout.\nmutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: [ID!]!) {\n  checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"lineItemIds\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Removes line items from an existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutLineItemsReplace",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Sets a list of line items to a checkout.\nmutation checkoutLineItemsReplace($lineItems: [CheckoutLineItemInput!]!, $checkoutId: ID!) {\n  checkoutLineItemsReplace(lineItems: $lineItems, checkoutId: $checkoutId) {\n    checkout # The updated checkout object.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"lineItems\": [{}],\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Sets a list of line items to a checkout."
					},
					"response": []
				},
				{
					"name": "checkoutLineItemsUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates line items on a checkout.\nmutation checkoutLineItemsUpdate($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n  checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"lineItems\": [{}]\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates line items on a checkout."
					},
					"response": []
				},
				{
					"name": "checkoutShippingAddressUpdateV2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the shipping address of an existing checkout.\nmutation checkoutShippingAddressUpdateV2($shippingAddress: MailingAddressInput!, $checkoutId: ID!) {\n  checkoutShippingAddressUpdateV2(\n    shippingAddress: $shippingAddress\n    checkoutId: $checkoutId\n  ) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"shippingAddress\": {},\n\t\"checkoutId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the shipping address of an existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutShippingLineUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the shipping lines on an existing checkout.\nmutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\n  checkoutShippingLineUpdate(\n    checkoutId: $checkoutId\n    shippingRateHandle: $shippingRateHandle\n  ) {\n    checkout # The updated checkout object.\n    checkoutUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"checkoutId\": \"0\",\n\t\"shippingRateHandle\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the shipping lines on an existing checkout."
					},
					"response": []
				},
				{
					"name": "customerAccessTokenCreate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a customer access token.\n# The customer access token is required to modify the customer object in any way.\n# \nmutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n  customerAccessTokenCreate(input: $input) {\n    customerAccessToken # The newly created customer access token object.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a customer access token.\nThe customer access token is required to modify the customer object in any way.\n"
					},
					"response": []
				},
				{
					"name": "customerAccessTokenCreateWithMultipass",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a customer access token using a\n# [multipass token](https://shopify.dev/api/multipass) instead of email and\n# password. A customer record is created if the customer doesn't exist. If a customer\n# record already exists but the record is disabled, then the customer record is enabled.\n# \nmutation customerAccessTokenCreateWithMultipass($multipassToken: String!) {\n  customerAccessTokenCreateWithMultipass(multipassToken: $multipassToken) {\n    customerAccessToken # An access token object associated with the customer.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"multipassToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a customer access token using a\n[multipass token](https://shopify.dev/api/multipass) instead of email and\npassword. A customer record is created if the customer doesn't exist. If a customer\nrecord already exists but the record is disabled, then the customer record is enabled.\n"
					},
					"response": []
				},
				{
					"name": "customerAccessTokenDelete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Permanently destroys a customer access token.\nmutation customerAccessTokenDelete($customerAccessToken: String!) {\n  customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n    deletedAccessToken # The destroyed access token.\n    deletedCustomerAccessTokenId # ID of the destroyed customer access token.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Permanently destroys a customer access token."
					},
					"response": []
				},
				{
					"name": "customerAccessTokenRenew",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Renews a customer access token.\n# \n# Access token renewal must happen *before* a token expires.\n# If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.\n# \nmutation customerAccessTokenRenew($customerAccessToken: String!) {\n  customerAccessTokenRenew(customerAccessToken: $customerAccessToken) {\n    customerAccessToken # The renewed customer access token object.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Renews a customer access token.\n\nAccess token renewal must happen *before* a token expires.\nIf a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.\n"
					},
					"response": []
				},
				{
					"name": "customerActivate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Activates a customer.\nmutation customerActivate($id: ID!, $input: CustomerActivateInput!) {\n  customerActivate(id: $id, input: $input) {\n    customer # The customer object.\n    customerAccessToken # A newly created customer access token object for the customer.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Activates a customer."
					},
					"response": []
				},
				{
					"name": "customerActivateByUrl",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Activates a customer with the activation url received from `customerCreate`.\nmutation customerActivateByUrl($activationUrl: URL!, $password: String!) {\n  customerActivateByUrl(activationUrl: $activationUrl, password: $password) {\n    customer # The customer that was activated.\n    customerAccessToken # A new customer access token for the customer.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"activationUrl\": null,\n\t\"password\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Activates a customer with the activation url received from `customerCreate`."
					},
					"response": []
				},
				{
					"name": "customerAddressCreate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a new address for a customer.\nmutation customerAddressCreate($customerAccessToken: String!, $address: MailingAddressInput!) {\n  customerAddressCreate(\n    customerAccessToken: $customerAccessToken\n    address: $address\n  ) {\n    customerAddress # The new customer address object.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\",\n\t\"address\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a new address for a customer."
					},
					"response": []
				},
				{
					"name": "customerAddressDelete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Permanently deletes the address of an existing customer.\nmutation customerAddressDelete($id: ID!, $customerAccessToken: String!) {\n  customerAddressDelete(id: $id, customerAccessToken: $customerAccessToken) {\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    deletedCustomerAddressId # ID of the deleted customer address.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"customerAccessToken\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Permanently deletes the address of an existing customer."
					},
					"response": []
				},
				{
					"name": "customerAddressUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the address of an existing customer.\nmutation customerAddressUpdate($customerAccessToken: String!, $id: ID!, $address: MailingAddressInput!) {\n  customerAddressUpdate(\n    customerAccessToken: $customerAccessToken\n    id: $id\n    address: $address\n  ) {\n    customerAddress # The customer’s updated mailing address.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\",\n\t\"id\": \"0\",\n\t\"address\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the address of an existing customer."
					},
					"response": []
				},
				{
					"name": "customerCreate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Creates a new customer.\nmutation customerCreate($input: CustomerCreateInput!) {\n  customerCreate(input: $input) {\n    customer # The created customer object.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Creates a new customer."
					},
					"response": []
				},
				{
					"name": "customerDefaultAddressUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates the default address of an existing customer.\nmutation customerDefaultAddressUpdate($customerAccessToken: String!, $addressId: ID!) {\n  customerDefaultAddressUpdate(\n    customerAccessToken: $customerAccessToken\n    addressId: $addressId\n  ) {\n    customer # The updated customer object.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\",\n\t\"addressId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates the default address of an existing customer."
					},
					"response": []
				},
				{
					"name": "customerRecover",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Sends a reset password email to the customer. The reset password\n# email contains a reset password URL and token that you can pass to\n# the [`customerResetByUrl`](https://shopify.dev/api/storefront/latest/mutations/customerResetByUrl) or\n# [`customerReset`](https://shopify.dev/api/storefront/latest/mutations/customerReset) mutation to reset the\n# customer password.\n# \n# This mutation is throttled by IP. With authenticated access,\n# you can provide a [`Shopify-Storefront-Buyer-IP`](https://shopify.dev/api/usage/authentication#optional-ip-header) instead of the request IP.\n# \n# Make sure that the value provided to `Shopify-Storefront-Buyer-IP` is trusted. Unthrottled access to this\n# mutation presents a security risk.\n# \nmutation customerRecover($email: String!) {\n  customerRecover(email: $email) {\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"email\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Sends a reset password email to the customer. The reset password\nemail contains a reset password URL and token that you can pass to\nthe [`customerResetByUrl`](https://shopify.dev/api/storefront/latest/mutations/customerResetByUrl) or\n[`customerReset`](https://shopify.dev/api/storefront/latest/mutations/customerReset) mutation to reset the\ncustomer password.\n\nThis mutation is throttled by IP. With authenticated access,\nyou can provide a [`Shopify-Storefront-Buyer-IP`](https://shopify.dev/api/usage/authentication#optional-ip-header) instead of the request IP.\n\nMake sure that the value provided to `Shopify-Storefront-Buyer-IP` is trusted. Unthrottled access to this\nmutation presents a security risk.\n"
					},
					"response": []
				},
				{
					"name": "customerReset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# \"Resets a customer’s password with the token received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation.\"\n# \nmutation customerReset($id: ID!, $input: CustomerResetInput!) {\n  customerReset(id: $id, input: $input) {\n    customer # The customer object which was reset.\n    customerAccessToken # A newly created customer access token object for the customer.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "\"Resets a customer’s password with the token received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation.\"\n"
					},
					"response": []
				},
				{
					"name": "customerResetByUrl",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# \"Resets a customer’s password with the reset password URL received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation.\"\n# \nmutation customerResetByUrl($resetUrl: URL!, $password: String!) {\n  customerResetByUrl(resetUrl: $resetUrl, password: $password) {\n    customer # The customer object which was reset.\n    customerAccessToken # A newly created customer access token object for the customer.\n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"resetUrl\": null,\n\t\"password\": \"\"\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "\"Resets a customer’s password with the reset password URL received from a reset password email. You can send a reset password email with the [`customerRecover`](https://shopify.dev/api/storefront/latest/mutations/customerRecover) mutation.\"\n"
					},
					"response": []
				},
				{
					"name": "customerUpdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopify-Storefront-Access-Token",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Updates an existing customer.\nmutation customerUpdate($customerAccessToken: String!, $customer: CustomerUpdateInput!) {\n  customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n    customer # The updated customer object.\n    customerAccessToken # The newly created customer access token. If the customer's password is updated, all previous access tokens (including the one used to perform this mutation) become invalid, and a new token is generated. \n    customerUserErrors # The list of errors that occurred from executing the mutation.\n    userErrors # The list of errors that occurred from executing the mutation.\n  }\n}",
								"variables": "{\n\t\"customerAccessToken\": \"\",\n\t\"customer\": {}\n}"
							}
						},
						"url": {
							"raw": "https://wholesome-dimsum.myshopify.com/api/unstable/graphql.json",
							"protocol": "https",
							"host": [
								"wholesome-dimsum",
								"myshopify",
								"com"
							],
							"path": [
								"api",
								"unstable",
								"graphql.json"
							]
						},
						"description": "Updates an existing customer."
					},
					"response": []
				}
			]
		}
	]
}